{
  "hash": "6ab781e0905c0f7bff0e0b0caf258a51",
  "result": {
    "markdown": "---\ntitle: \"Git: Dicas e truques\"\nlang: pt\nauthor: \"Dransfeld, N. M.\"\ndate: \"2023-06-21\"\ncategories: [BigData,Database,LambdaArchitecture,Português]\n# image: \".png\"\n---\n\n\n::: {style=\"color: navy; text-align: center;\"}\n# **Git: Dicas e truques**\n:::\n\n::: {style=\"text-align: justify;\"}\nO Git é um sistema de controle de versão conhecido como VCS (do inglês, version control system) e vem sendo amplamente utilizado no desenvolvimento de códigos para software, sites, aplicativos, aprendizado de máquina, inteligência artificial etc. Ele foi criado por Linus Torvalds em 2005 para ajudar no desenvolvimento do kernel do Linux, mas desde então se tornou uma ferramenta essencial em muitos projetos de software.\n\nEsta ferramenta permite que os desenvolvedores acompanhem as alterações feitas em seus arquivos ao longo do tempo, facilitando o trabalho colaborativo e o gerenciamento eficiente de versões de um projeto. O sistema do GIt registra todas as alterações feitas nos arquivos, permitindo que os desenvolvedores rastreiem quem fez cada alteração, quando foi feita e por que.\n\nAlém disso, o Git possui uma ampla gama de recursos, como ramificações (branches) para o desenvolvimento paralelo, fusão (merge) das ramificações, resolução de conflitos e integração com serviços de hospedagem como o GitHub, Bitbucket e GitLab.\n\n## Primeiros Passos\n\nPara este artigo será utilizado códigos aplicavéis para o Windows com a instalação do Git Bash.\n\n### Configuração inicial:\n\nAntes de começar a usar o Git, é necessário configurar seu nome de usuário e e-mail. O Git usa essas informações para registrar quem fez as alterações.\n\n``` {style=\"color:red\"}\ngit config –global user.name \"Seu Nome\"\ngit config –global user.email \"seuemail@exemplo.com\"\n```\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code dff df\"}\n#> This is some hidden comment which is visible in code editor\n# TESTE\ndfsdf<-1+1\nprint(dfsdf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n:::\n\n\\*\\* #GitTips #GitTricks #GitBestPractices #VersionControl #GitCommands #GitAdvanced\\*\\*\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}