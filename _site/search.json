[
  {
    "objectID": "Blog.html",
    "href": "Blog.html",
    "title": "Data Driven Destinations",
    "section": "",
    "text": "Welcome to my blog, where I apply various concepts from statistics, geostatistics, data science and machine learning. My mission is to provide high-quality content that helps you understand and apply fundamental and advanced concepts in this area. Join me on this journey as we explore the latest trends and techniques in data-driven decision-making and spatial analysis.\n\n\nNavigate the world of data science, machine learning and geostatistics to uncover powerful insights and make informed decision\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nLições do Pôquer para Cientistas de Dados\n\n\n\n\n\n\n\nPoker\n\n\nDataScience\n\n\nPortuguês\n\n\n\n\nExplora como o pôquer e ciência de dados se assemelham em análise estratégica, decisão sob incerteza e gerenciamento de riscos.\n\n\n\n\n\n\nDec 17, 2023\n\n\nDransfeld, N. M.\n\n\n\n\n\n\n  \n\n\n\n\nGit: Dicas e Truques\n\n\n\n\n\n\n\nGit\n\n\nGitHub\n\n\nPortuguês\n\n\n\n\nOferece dicas e truques avançados de Git para otimizar controle de versões em desenvolvimento de software.\n\n\n\n\n\n\nJul 25, 2023\n\n\nDransfeld, N. M.\n\n\n\n\n\n\n  \n\n\n\n\nData Lake e Arquitetura Lambda\n\n\n\n\n\n\n\nBigData\n\n\nDatabase\n\n\nLambdaArchitecture\n\n\nPortuguês\n\n\n\n\n\n\n\n\n\n\n\nJun 19, 2023\n\n\nDransfeld, N. M.\n\n\n\n\n\n\n  \n\n\n\n\nO que é ‘Data Driven ?’\n\n\n\n\n\n\n\nDataScience\n\n\nBusinessIntelligence\n\n\nPortuguês\n\n\n\n\n\n\n\n\n\n\n\nJun 6, 2023\n\n\nDransfeld, N. M.\n\n\n\n\n\n\n  \n\n\n\n\nTermos com a palavra ‘Data’\n\n\n\n\n\n\n\nDataScience\n\n\nPortuguês\n\n\n\n\n\n\n\n\n\n\n\nJun 1, 2023\n\n\nDransfeld, N. M.\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nion M. Dransfeld",
    "section": "",
    "text": "Linkedin\n  \n  \n    \n     Github\n  \n\n  \n  \n\nCivil Engineer with over 10 years of experience, working in areas such as strategic planning, contract management, construction execution, and building maintenance. Since 2020, I have been acquiring knowledge in Data Science and Machine Learning, focusing on problem-solving in the environmental and business intelligence fields. In addition, I am an enthusiast of the financial market and, in my free time, dedicate myself to studying investments and risk analysis in stocks, futures, options, and cryptocurrencies.\n\n\n\n\nMaster’s in Civil Engineering | jan 2023  University of the State of Santa Catarina\n\n\nPostgraduate Structural Engineering | June 2016  Educational Society University of Santa Catarina\n\n\nBachelor of Civil Engineering | June 2012  University of the State of Santa Catarina"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Nion M. Dransfeld",
    "section": "",
    "text": "Master’s in Civil Engineering | jan 2023  University of the State of Santa Catarina\n\n\nPostgraduate Structural Engineering | June 2016  Educational Society University of Santa Catarina\n\n\nBachelor of Civil Engineering | June 2012  University of the State of Santa Catarina"
  },
  {
    "objectID": "index.html#latest-content",
    "href": "index.html#latest-content",
    "title": "Nion M. Dransfeld",
    "section": "Latest content",
    "text": "Latest content\n\n\n\n\n\n\n\n\n\n\n\nLições do Pôquer para Cientistas de Dados\n\n\nExplora como o pôquer e ciência de dados se assemelham em análise estratégica, decisão sob incerteza e gerenciamento de riscos.\n\n\n\nDransfeld, N. M.\n\n\nDec 17, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGit: Dicas e Truques\n\n\nOferece dicas e truques avançados de Git para otimizar controle de versões em desenvolvimento de software.\n\n\n\nDransfeld, N. M.\n\n\nJul 25, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Lake e Arquitetura Lambda\n\n\n\n\n\n\nDransfeld, N. M.\n\n\nJun 19, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "NionMaron",
    "section": "",
    "text": "Attribution 4.0 International\n=======================================================================\nCreative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\nUsing Creative Commons Public Licenses\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\nwiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public: \nwiki.creativecommons.org/Considerations_for_licensees\n=======================================================================\nCreative Commons Attribution 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)\n\nnever produces Adapted Material.\n\nDownstream recipients.\n\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\nIf You Share Adapted Material You produce, the Adapter’s License You apply must not prevent recipients of the Adapted Material from complying with this Public License.\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\nTO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n=======================================================================\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org."
  },
  {
    "objectID": "posts/0004-Git-Dicas-e-Truques-pt/index.html",
    "href": "posts/0004-Git-Dicas-e-Truques-pt/index.html",
    "title": "Git: Dicas e Truques",
    "section": "",
    "text": "O Git é um sistema de controle de versão conhecido como VCS (do inglês, version control system) e vem sendo amplamente utilizado no desenvolvimento de códigos para software, sites, aplicativos, aprendizado de máquina, inteligência artificial, etc. Ele foi criado por Linus Torvalds em 2005 para ajudar no desenvolvimento do kernel do Linux, mas desde então se tornou uma ferramenta essencial em muitos projetos de software.\nEsta ferramenta permite que os desenvolvedores acompanhem as alterações feitas em seus arquivos ao longo do tempo, facilitando o trabalho colaborativo e o gerenciamento eficiente de versões de um projeto. O sistema do Git registra todas as alterações feitas nos arquivos, permitindo que os desenvolvedores rastreiem quem fez cada alteração, quando foi feita e seu motivo.\nAlém disso, o Git possui uma ampla gama de recursos, como ramificações (branches) para o desenvolvimento paralelo, fusão (merge) das ramificações, resolução de conflitos e integração com serviços de hospedagem como o GitHub, Bitbucket e GitLab (Fig. 01).\nA adoção generalizada do Git e a integração com várias plataformas de desenvolvimento, como o GitHub, tornam-no uma escolha adquada para o controle de versão. Além disso, à medida que mais empresas adotam práticas de DevOps e integração contínua / entrega contínua (CI/CD), o Git, com suas características de ramificação e fusão, torna-se uma ferramenta essencial. O Git também é altamente escalável, o que significa que pode acomodar projetos que vão desde pequenos aplicativos individuais até grandes projetos corporativos.\n\n\n\nFig.01 - Principais comandos Git e representação do fluxo de trabalho\n\n\nNesse artigo, vou apresentar uma série de dicas e truques essenciais para o Git, focados na plataforma Windows e utilizando o Git Bash como ambiente de linha de comando. Embora o enfoque seja no Windows, é importante ressaltar que muitos dos comandos e conceitos abordados também se aplicam ao Mac e ao Linux. Caso queira consultar todas as funções e ter uma melhor descrição dos comandos você pode consulta o manual no link https://git-scm.com/docs\n\n\n\n\n\n\nWindows: visite o site oficial do Git https://git-scm.com e clique no botão de download para Windows e execute o arquivo.\nmacOS: se você usa o macOS, pode instalar o Git usando o gerenciador de pacotes Homebrew. Primeiro, instale o Homebrew abrindo o Terminal e executando alguns comandos.\nLinux:: se você é usuário do Ubuntu ou Debian, o Git provavelmente está disponível via apt. Para instalá-lo, abra um terminal e execute: sudo apt-get install git.\n\n\n\n\nAo utilizar o Git, é recomendável configurar seu nome e endereço de e-mail. Essas informações são registradas nos commits (confirmações) que você realiza em um repositório Git. Existem algumas razões pelas quais você deve fornecer esses detalhes para identificação do autor e rastreamento de contribuições. Para configurar seu nome e endereço de e-mail no Git, você pode utilizar os seguintes comandos no terminal:\ngit config –global user.name \"Seu Nome\"\ngit config –global user.email \"seuemail@exemplo.com\"\n\n\n\nO Git foi originalmente desenvolvido para ser usado no Linux, um sistema operacional do tipo Unix, por isso é natural que ele use uma interface de linha de comando baseada em Unix. Abaixo algumas funções úteis:\n\nls: Lista o conteúdo do diretório corrente;\npwd: significa “print working directory”, este comando retorna o caminho absoluto do diretório atual;\ncd: significa “change directory”e é usado para mudar o diretório atual. Em Unix, cd . representa o diretório atual e cd .. representa o diretório pai;\ntouch: atualiza a data de um arquivo (o cria, se não existir).\n\n\n\n\nCommit atômico é um conceito em controle de versão que sugere na qual cada commit deve ser uma unidade pequena e que todos os seus arquivos estejam dentro do mesmo contexto. Isso significa que cada commit deve representar uma única alteração lógica no código - seja corrigindo um bug ou adicionando uma nova funcionalidade.\nOs commits atômicos são uma prática recomendada em controle de versão e são importantes por várias razões:\n\nFacilita o entendimento do histórico do projeto;\nTorna a resolução de conflitos mais fácil;\nPermite reverter mudanças facilmente;\nFacilita a revisão de código;\n\nAlerta: Dentro de um repositório Git, não se deve criar outro repositório Git. Isso ocorre porque o Git trata todo o diretório do repositório como uma unidade indivisível e não suporta a criação de repositórios dentro dele. Criar outro repositório Git dentro de um repositório existente pode levar a vários problemas e erros, pois o Git não foi projetado para lidar com aninhamento de repositórios. Aqui estão alguns possíveis erros que podem ocorrer: conflitos de versionamento, problemas de sincronização, dificuldades na colaboração e perda de dados. Para verificar se você está criando indevidamente um repositório dentro de um repositório existente, você pode executar o seguinte comando no terminal dentro do diretório do seu projeto: git status.\n\n\n\n\nNo Git, uma branch é uma linha de desenvolvimento separada que permite que você trabalhe em recursos ou correções de bugs sem interferir no código principal. Cada branch é uma ramificação independente do histórico de commits e pode ser mesclada (merged) com outras branches posteriormente. As branches são úteis para organizar o trabalho em equipe, permitindo que várias pessoas trabalhem em diferentes partes do projeto simultaneamente.\nAqui estão alguns dos principais comandos relacionados a branches no Git, juntamente com suas descrições:\n\ngit branch: Exibe uma lista de todas as branches no repositório. O asterisco (*) indica a branch atualmente ativa.\ngit branch &lt;nome_branch&gt;: Cria uma nova branch com o nome especificado.\ngit switch &lt;nome_branch&gt;: É um comando projetado para a tarefa de mudar de branch, simplificando o uso em relação ao git checkout. O git switch não executa ações adicionais, apenas muda a branch atual.\ngit switch -c &lt;nome_branch&gt;: cria uma nova branch a partir da branch atual e muda para ela, tudo em um único comando, permitindo que você crie e mude para uma nova branch de forma rápida e conveniente.\ngit merge &lt;nome_branch&gt;: Incorpora as alterações da branch especificada na branch atual. Isso cria um novo commit de merge no histórico.\ngit branch -d &lt;nome_branch&gt;: Exclui a branch especificada após mesclá-la com sucesso em outra branch.\ngit branch -D &lt;nome_branch&gt;: Força a exclusão da branch especificada, mesmo que as alterações não tenham sido mescladas.\ngit branch -m &lt;nome_antigo&gt; &lt;nome_novo&gt;: Renomeia a branch especificada.\ngit branch -r: Exibe uma lista das branches remotas disponíveis.\ngit push &lt;origin&gt; &lt;nome_branch&gt;: Envia a branch especificada para o repositório remoto.\ngit pull &lt;origin&gt; &lt;nome_branch&gt;: Atualiza a branch local com as alterações mais recentes do repositório remoto.\ngit log: é um comando usado no sistema de controle de versão Git que exibe um histórico de commits que levaram ao estado atual do código. Ele mostra o autor, a data e a mensagem do commit, ajudando a rastrear as mudanças e entender a evolução do projeto.\n\n\n\n\ngit commit -a -m: adiciona automaticamente todas as alterações nos arquivos rastreados e faz um commit com uma mensagem específica, permitindo que você realize o commit rapidamente sem precisar usar o comando git add separadamente;\ngit init: cria um novo repositório do Git. Ele pode ser usado para converter um projeto existente e não versionado em um repositório do Git ou inicializar um novo repositório vazio.\ngit diff branch1..branch2: Compara a ponta das duas ramificações (branch), para visualizar as modificações;\ngit checkout HEAD\\~1: é um comando do Git usado para alterar o estado do repositório Git para o commit anterior ao commit atual;\ngit --version: isso deve retornar a versão do Git que você instalou;\nctrl + l: é o comando no teclado que limpa a tela do terminal do git.\n\n\n\n\n\nA partir da versão 2.23 do Git, o comando git restore é usado para restaurar conteúdos de arquivos no diretório de trabalho e na área de preparação (staging area) do Git. Ele pode ser usado para descartar modificações em arquivos que ainda não foram confirmadas em um commit ou para recuperar arquivos excluídos.\nA sintaxe básica do comando git restore é a seguinte:\ngit restore &lt;opções&gt; &lt;arquivo&gt;\nO comportamento exato do comando git restore pode variar dependendo da versão do Git que você está utilizando. É recomendado verificar a documentação oficial do Git ou executar git restore --help para obter informações detalhadas sobre as opções e comportamentos específicos da versão do Git que você está utilizando.\n\n\n\nO comando git reset é usado no Git para alterar a posição do branch (ramificação) atual e desfazer commits. Ele permite reverter o histórico do Git, descartando commits anteriores ou movendo o branch para um commit específico.\nExistem diferentes opções de uso do comando git reset. Aqui estão algumas das formas comuns de uso:\nReset “soft” (suave): O comando git reset --soft desfaz o commit mais recente, mas mantém as alterações do commit no diretório de trabalho e na área de preparação (staging area). Isso permite que você faça alterações adicionais e faça um novo commit com as alterações corrigidas. css Copy code git reset –soft HEAD~1\nReset “mixed” (padrão): O comando git reset --mixeddesfaz o commit mais recente e remove as alterações do commit da área de preparação (staging area), mas mantém as alterações no diretório de trabalho. Isso permite que você revise as alterações novamente e escolha quais arquivos deseja preparar para um novo commit. css Copy code git reset –mixed HEAD~1\nReset “hard” (rígido): O comando git reset --hard desfaz completamente o commit mais recente, descartando todas as alterações do commit e do diretório de trabalho. Isso reverte o repositório Git para o estado do commit anterior e exclui todas as alterações não confirmadas. É importante ressaltar que, ao usar o comando git reset, os commits desfeitos são excluídos permanentemente do histórico. Portanto, tenha cuidado ao usá-lo e verifique se você tem um backup ou está confortável em perder esses commits.\nRecomenda-se verificar a documentação oficial do Git ou executar git reset --help para obter informações detalhadas sobre as opções e comportamentos específicos do comando “git reset” na versão do Git que você está utilizando.\n\n\n\nO comando “git revert” é usado no Git para criar um novo commit que desfaz as alterações de um ou mais commits anteriores. Ao contrário do comando “git reset”, que remove os commits do histórico, o “git revert” desfaz as alterações de um commit existente criando um novo commit que reverte as modificações introduzidas.\nA sintaxe básica do comando git revert é a seguinte:\ngit revert &lt;commit&gt; \nAo executar o comando git revert, o Git cria um novo commit que reverte as alterações introduzidas pelo commit especificado. Esse novo commit é adicionado ao histórico, desfazendo as modificações feitas pelo commit original, mas preservando o histórico completo do projeto.\nO comando git revert pode aceitar várias opções para personalizar o comportamento:\n\nn ou –no-commit: Realiza a revert sem criar automaticamente um novo commit. Isso permite que você faça alterações adicionais antes de confirmar as reversões em um novo commit.\nm parent-number: Especifica qual parente de um commit de merge deve ser revertido. O parente é numerado a partir de 1, e o commit de merge é especificado usando seu hash.\ns ou –signoff: Adiciona uma assinatura digital na mensagem de confirmação do revert.\n\nEssas são apenas algumas opções comuns, e há mais opções disponíveis. Recomenda-se consultar a documentação oficial do Git ou executar git revert --help para obter informações mais detalhadas sobre as opções e comportamentos específicos do comando git revert na versão do Git que você está utilizando.\nO git revert é uma maneira segura de desfazer alterações em commits anteriores sem alterar o histórico do projeto, sendo útil quando você deseja manter um registro completo de todas as alterações e garantir que a colaboração no projeto não seja afetada.\n\n\n\nO comando “git stash” é uma funcionalidade do sistema de controle de versão Git que permite aos desenvolvedores salvar temporariamente as alterações feitas em seu repositório de trabalho, sem precisar fazer um commit completo. O “stash” pode ser visto como uma área de armazenamento temporário para alterações não concluídas.\nPosteriormente, quando desejar retomar as alterações salvas, você pode usar os comandos git stash list para ver a lista de stashes disponíveis e git stash apply ou git stash pop para aplicar novamente as alterações salvas no seu diretório de trabalho. A diferença entre os comandos “apply” e “pop” é que o “apply” mantém o stash na lista, enquanto o “pop” remove o stash após aplicar as alterações.\n\n\n\nO git reflog é um comando útil do Git que registra quando as pontas dos ramos e outras referências foram atualizadas no repositório local. Ele ajuda você a entender a história de um repositório de uma maneira mais granular do que git log, porque também registra quando você faz checkout para outro ramo, quando um commit é alterado (por exemplo, com git commit --amend), e assim por diante.\nSegue alguns usos comuns do git reflog:\n\nRecuperação de commits perdidos: O Git tem um sistema de garbage collection que limpa commits inacessíveis de tempos em tempos, mas antes disso, você pode usar o git reflog para encontrar commits perdidos. Isso é útil quando você exclui um ramo por engano, por exemplo.\nDesfazer rebase: Um comando git rebase pode ser uma operação complicada que às vezes dá errado. Se você deseja desfazer um rebase, pode usar o git reflog para encontrar o estado do seu ramo antes do rebase e retornar a esse estado.\n\nO comando git reflog exibe uma lista de todos os pontos na história do seu HEAD. Para cada entrada, ele mostra um hash de commit, a ação que levou a esse estado (como um commit, rebase, checkout etc.), e uma referência para essa entrada na forma de HEAD@{n}, onde n é o número de passos atrás nesse ponto na história.\nO git reflog mantém um registro das últimas ações no Git que modificaram o HEAD, incluindo commits, checkouts e outros. Por padrão, o Git mantém esses registros por 90 dias. Esse período de 90 dias é chamado de período de “expiração” do reflog.\n\n\n\nRebasing” e “Merging” são duas estratégias diferentes no Git para integrar mudanças de uma branch (ramificação) para outra. Ambos são usados para manter o seu código sincronizado com o trabalho de outros desenvolvedores, mas funcionam de maneiras ligeiramente diferentes e são melhores em situações diferentes.\n\nRebasing (Rebase): O comando git rebase move ou combina uma sequência de commits para uma nova base de commit. Ele é útil para fazer sua feature branch “atualizada” com as últimas mudanças de outra branch (como a main ou master). Com o rebase, os commits da feature branch são aplicados na branch base, um por um, como se eles tivessem sido criados de novo. Isso resulta em um histórico de commits linear, o que pode ser mais fácil de entender.\nMerging (Merge): O comando git merge pega o conteúdo de uma branch de origem e a integra com a branch de destino. Um novo commit de merge é criado que aponta para os dois commits, preservando o histórico de commits e a relação entre as branches. Isso mantém a história completa do projeto, incluindo todas as ramificações e mesclagens, mas pode ser mais difícil de navegar devido à sua não linearidade.\n\nA diferença principal entre os dois (rebase e merge) é que o rebase cria um histórico de commits linear, “recriando” os commits, enquanto o merge preserva o histórico exato e cria um novo commit de merge. A escolha entre um e outro depende de fatores como a complexidade do projeto, a necessidade de manter um histórico limpo e linear versus um histórico completo e exato, e as preferências da equipe.\nO comando git rebase -i HEAD é utilizado para iniciar um processo de rebase interativo. O rebase interativo é uma funcionalidade do Git que permite modificar uma sequência de commits existente de várias formas. A opção -i no comando significa “interativo”, o que significa que o Git abrirá um editor de texto com uma lista dos últimos commits, permitindo que você escolha exatamente o que quer fazer com cada um.\nO termo HEAD é uma referência ao commit mais recente na branch atual. Portanto, git rebase -i HEAD começará um rebase interativo que, por padrão, não inclui nenhum commit, pois você está tentando rebase na mesma posição do HEAD. Normalmente, você especificaria um número de commits antes do HEAD ou uma referência a outro commit, como HEAD~3 ou HEAD^, para iniciar um rebase interativo dos últimos 3 commits ou do último commit, respectivamente.\nDurante um rebase interativo, você pode fazer várias coisas, como:\n\npick: usar um commit como está.\nreword: usar o commit, mas alterar a mensagem do commit.\nedit: usar o commit, mas parar para que você possa modificar os arquivos e/ou o commit.\nsquash: usar as alterações do commit, mas mesclá-las com o commit anterior.\nfixup: como “squash”, mas descarta a mensagem do commit.\ndrop: descartar o commit. Essa flexibilidade faz do rebase interativo uma ferramenta poderosa para limpar o histórico de commits antes de compartilhar suas alterações com outros.\n\n\n\n\nAs tags no Git são referências que apontam para pontos específicos no histórico de commits. Elas são usados geralmente para capturar um ponto na história que é marcado por uma versão de lançamento de software, por exemplo, v1.0, v2.0, etc.\nExistem dois tipos principais de tags no Git:\n\nLightweight (Leve): É simplesmente uma referência a um commit. As tags leves não incluem nenhuma informação extra além do commit em si. Para criar uma tag leve, você pode usar o comando git tag seguido do nome da tag e a referência do commit.\nAnnotated (Anotada): São armazenadas como objetos completos no banco de dados Git, o que significa que eles incluem informações extras como o tagger (a pessoa que fez a tag), a data, a mensagem e podem ser verificadas com GPG. As tags anotadas são recomendadas porque incluem essa informação extra. Você pode criar uma tag anotada com o comando git tag -a, seguido do nome da tag, e geralmente uma mensagem de descrição é adicionada.\n\nAs tags não são movidas quando novos commits são criados, elas continuam apontando para o mesmo commit mesmo quando novos commits são adicionados ao repositório. Isso torna as tags úteis para marcar versões específicas de um projeto.\nVocê pode ver todas as tags em um repositório com o comando git tag. E para compartilhar tags com outros repositórios, elas precisam ser explicitamente “pushed” para o repositório remoto, usando o comando git push origin \\[tagname\\] ou git push origin --tags para enviar todas as tags.\nMudar e deletar tags no Git é bastante simples: Para mudar uma tag, primeiro você deve deletá-la e então recriá-la apontando para o novo commit. Por exemplo, se você tem uma tag chamada “v1.0” e quer mudá-la para apontar para um commit diferente, você pode fazer isso da seguinte maneira:\ngit tag -d &lt;nome-da-tag&gt;\nSe a tag tiver sido enviada para o repositório remoto, você precisará removê-la do repositório remoto também. Para fazer isso, use o seguinte comando:\ngit push --delete origin &lt;nome-da-tag&gt;\nLembre-se de que, uma vez que a tag seja deletada e a informação seja propagada para outros clones do repositório, não haverá nenhuma referência ao commit original marcado pela tag. Então, tenha certeza antes de deletar uma tag, especialmente se ela foi compartilhada com outros.\n\n\n\nO comando git config é uma parte essencial do Git, usado para configurar as opções específicas do usuário, como email, algoritmo preferido para diff, nome de usuário e tipo de formato, entre outras coisas. Essas informações são armazenadas em três locais diferentes:\n\n/etc/gitconfig: Contém valores para todos os usuários no sistema e todos os seus repositórios. Se você passar a opção –system para git config, ele lê e escreve a partir deste arquivo.\n~/.gitconfig ou ~/.config/git/config: Especificamente para você, o usuário logado. Você pode fazer o Git ler e escrever para este arquivo passando a opção –global.\nconfig no diretório Git (ou seja, .git/config) de qualquer repositório que você esteja usando: Específico para esse único repositório. Cada nível sobrescreve os valores no nível anterior, então valores em .git/config têm precedência sobre /etc/gitconfig.\n\nO comando git config --list lista as configurações do Git que estão atualmente configuradas.\n\n\n\nO Git é um sistema de controle de versão que mantém o histórico de alterações em arquivos e diretórios em um repositório. Para fazer isso, o Git usa um sistema de armazenamento de objetos que contém quatro tipos principais de objetos: blob, tree, commit e tag.\n1. Blob: O tipo de objeto mais básico no Git é o blob. Um objeto blob é um arquivo com dados, mas sem metadados (como nome de arquivo ou permissões). Cada versão de cada arquivo em seu repositório Git é armazenada como um objeto blob separado.\n2. Tree: Um objeto de tree (árvore) no Git é essencialmente análogo a um diretório. Ele representa uma estrutura de diretório de arquivos e outros diretórios. Um objeto tree contém um ou mais entradas de tree, cada uma das quais contém uma referência a um blob ou tree, juntamente com o nome do arquivo, permissões e o bit ‘execute’.\n3. Commit: Um objeto de commit contém metadados para cada alteração introduzida no repositório, incluindo o autor, o committer (que pode ser diferente do autor), a mensagem de commit e um ponteiro para o objeto tree que representa a estrutura de diretório de nível superior para o projeto. Cada commit também contém um ou mais ponteiros para os commit(s) pai(s) que representam o(s) estado(s) anterior(es) do projeto.\n4. Tag: Uma tag é uma referência a um objeto de commit, usada geralmente para marcar pontos específicos no histórico do repositório como uma versão específica de um projeto. Tags podem ser leves (apontando diretamente para um commit) ou anotadas (armazenadas como objetos completos com um apontador para um commit, um nome de tag, uma mensagem de tag e um tagger).\nEsses quatro tipos de objetos (blob, tree, commit e tag), juntamente com referências que apontam para objetos de commit (como branches e HEAD), formam a estrutura fundamental do sistema de armazenamento de dados do Git.\n\n\n\nSe surgir a necessidade de excluir um repositório Git e manter os arquivos, você pode fazer isso excluindo a pasta oculta .git, que é onde todas as informações do repositório Git são armazenadas. Porém, tenha muito cuidado, pois isso removerá todo o histórico de versões do Git para este repositório. Siga os passos abaixo para excluir o repositório Git:\n1- Navegue até o diretório que contém o repositório Git que você deseja excluir.\ncd /caminho/para/o/diretorio\n2- Exclua a pasta .git dentro desse diretório.\nrm -rf .git\n\n\n\nConfigurar duas contas Git para diferentes projetos pode ser feito de forma automática usando a funcionalidade de “inclusão condicional” no arquivo de configuração do Git (~/.gitconfig). Primeiro, é necessário configurar globalmente sua conta principal do Git com seu nome de usuário e email usando o comando git config. Em seguida, você pode criar uma inclusão condicional no arquivo ~/.gitconfig para especificar a configuração da segunda conta com base no diretório do projeto. Ao navegar para a pasta do segundo projeto, o Git utilizará automaticamente as configurações definidas para essa conta específica, como o nome do usuário e o email, enquanto em outros projetos continuará usando as configurações globais da primeira conta. Isso simplifica a gestão de várias contas Git em diferentes projetos, garantindo que as credenciais corretas sejam usadas em cada caso, sem a necessidade de alternar manualmente entre elas.\nPara criar a inclusão condicional no arquivo de configuração global, abra o arquivo de configuração do Git global ~/.gitconfig em um editor de texto. Adicione ou edite a seção [includeIf] da seguinte forma:\n[includeIf \"gitdir:/caminho/para/sua/segunda/pasta/\"]\npath = ~/.gitconfig-segunda-conta\nPara configurar contas do GitHub diferentes com o Git de forma automática, você pode utilizar o mesmo conceito de inclusão condicional, para mais detalhes de como fazer nos links abaixo:\n\nManage Multiple GitHub Accounts\nSteps to Set Up Multiple GitHub\n\n\n\n\nGitHub, Bitbucket e GitLab são plataformas baseadas em nuvem que fornecem hospedagem de repositórios Git, permitindo que os desenvolvedores armazenem e compartilhem seus códigos, colaborem em projetos e rastreiem e controlem alterações no código. GitHub é a plataforma mais popular, hospedando milhões de repositórios de desenvolvedores e organizações em todo o mundo. Ele não só suporta controle de versão Git, mas também fornece funcionalidades adicionais, como pull requests, issues de rastreamento, actions para automação de CI/CD e integração com muitas outras ferramentas e plataformas.\nCopiando (clonar) um repositorio existente:\ngit clone https://github.com/user/example.git\n\ngit clone: Este comando é usado para criar uma cópia local de um repositório remoto. Quando você executa git clone, o Git cria um novo diretório no seu sistema local, inicializa um repositório Git nesse diretório, puxa todo o histórico de commits do repositório remoto e verifica o último commit para o seu diretório de trabalho. Basicamente, é uma maneira de obter uma cópia completa de um projeto existente.\ngit remote: Este comando é usado para gerenciar as conexões com repositórios remotos. Ele permite que você crie, visualize e delete conexões para outros repositórios. Quando você clona um repositório, o Git automaticamente adiciona esse repositório como um “remote” chamado “origin”, permitindo que você interaja com o repositório original a partir do qual você clonou. Você pode adicionar mais remotos usando o comando git remote add, e pode sincronizar suas alterações com remotos usando comandos como git push e git pull.\ngit remote add usptream: Quando você adiciona um “upstream” ao seu repositório Git, você está criando uma conexão com um repositório remoto a partir do qual você deseja buscar ou puxar mudanças. Isso é útil, por exemplo, quando você fez um “fork” de um repositório em um serviço como o GitHub, e quer manter o seu fork sincronizado com as alterações do repositório original.Depois de adicionar o upstream, você pode buscar as alterações do repositório original com ‘git fetch upstream’, e pode mesclar essas alterações em sua branch atual com ‘git merge upstream/branch_name’.\ngit fetch: Este comando baixa as alterações do repositório remoto para o seu repositório local, mas não as mescla com o seu código nem modifica o seu código atual. Isso permite que você veja as alterações recentes no repositório remoto, sem misturá-las com o seu trabalho atual. Se você quiser integrar as mudanças no seu código, você precisará fazer um git merge após o fetch.\ngit pull: Este comando é essencialmente uma combinação degit fetch seguido de git merge. Ou seja, ele baixa as alterações do repositório remoto e as mescla automaticamente com o seu código atual. É útil quando você sabe que quer atualizar o seu código para corresponder ao estado mais recente do repositório remoto.\n\nA integração dessas plataformas baseadas em nuvem com o Git permite a colaboração e o controle de versão eficientes, facilitando o desenvolvimento de software ágil e o uso de práticas de DevOps. Além disso, elas também desempenham um papel crítico no suporte a equipes remotas, já que os desenvolvedores podem colaborar em projetos independentemente de sua localização geográfica.\n“Fetching” e “Pulling” são dois conceitos importantes no Git relacionados à obtenção de dados de repositórios remotos. A diferença entre os dois é que git fetch permite que você veja as alterações antes de decidir se quer integrá-las ou não, enquanto git pull baixa as alterações e as mescla com o seu código imediatamente (Fig. 01).\n#GitTips #GitTricks #GitBestPractices #VersionControl #GitCommands #GitAdvanced"
  },
  {
    "objectID": "posts/0004-Git-Dicas-e-Truques-pt/index.html#introdução",
    "href": "posts/0004-Git-Dicas-e-Truques-pt/index.html#introdução",
    "title": "Git: Dicas e Truques",
    "section": "",
    "text": "O Git é um sistema de controle de versão conhecido como VCS (do inglês, version control system) e vem sendo amplamente utilizado no desenvolvimento de códigos para software, sites, aplicativos, aprendizado de máquina, inteligência artificial, etc. Ele foi criado por Linus Torvalds em 2005 para ajudar no desenvolvimento do kernel do Linux, mas desde então se tornou uma ferramenta essencial em muitos projetos de software.\nEsta ferramenta permite que os desenvolvedores acompanhem as alterações feitas em seus arquivos ao longo do tempo, facilitando o trabalho colaborativo e o gerenciamento eficiente de versões de um projeto. O sistema do Git registra todas as alterações feitas nos arquivos, permitindo que os desenvolvedores rastreiem quem fez cada alteração, quando foi feita e seu motivo.\nAlém disso, o Git possui uma ampla gama de recursos, como ramificações (branches) para o desenvolvimento paralelo, fusão (merge) das ramificações, resolução de conflitos e integração com serviços de hospedagem como o GitHub, Bitbucket e GitLab (Fig. 01).\nA adoção generalizada do Git e a integração com várias plataformas de desenvolvimento, como o GitHub, tornam-no uma escolha adquada para o controle de versão. Além disso, à medida que mais empresas adotam práticas de DevOps e integração contínua / entrega contínua (CI/CD), o Git, com suas características de ramificação e fusão, torna-se uma ferramenta essencial. O Git também é altamente escalável, o que significa que pode acomodar projetos que vão desde pequenos aplicativos individuais até grandes projetos corporativos.\n\n\n\nFig.01 - Principais comandos Git e representação do fluxo de trabalho\n\n\nNesse artigo, vou apresentar uma série de dicas e truques essenciais para o Git, focados na plataforma Windows e utilizando o Git Bash como ambiente de linha de comando. Embora o enfoque seja no Windows, é importante ressaltar que muitos dos comandos e conceitos abordados também se aplicam ao Mac e ao Linux. Caso queira consultar todas as funções e ter uma melhor descrição dos comandos você pode consulta o manual no link https://git-scm.com/docs"
  },
  {
    "objectID": "posts/0004-Git-Dicas-e-Truques-pt/index.html#iniciando-com-git",
    "href": "posts/0004-Git-Dicas-e-Truques-pt/index.html#iniciando-com-git",
    "title": "Git: Dicas e Truques",
    "section": "",
    "text": "Windows: visite o site oficial do Git https://git-scm.com e clique no botão de download para Windows e execute o arquivo.\nmacOS: se você usa o macOS, pode instalar o Git usando o gerenciador de pacotes Homebrew. Primeiro, instale o Homebrew abrindo o Terminal e executando alguns comandos.\nLinux:: se você é usuário do Ubuntu ou Debian, o Git provavelmente está disponível via apt. Para instalá-lo, abra um terminal e execute: sudo apt-get install git.\n\n\n\n\nAo utilizar o Git, é recomendável configurar seu nome e endereço de e-mail. Essas informações são registradas nos commits (confirmações) que você realiza em um repositório Git. Existem algumas razões pelas quais você deve fornecer esses detalhes para identificação do autor e rastreamento de contribuições. Para configurar seu nome e endereço de e-mail no Git, você pode utilizar os seguintes comandos no terminal:\ngit config –global user.name \"Seu Nome\"\ngit config –global user.email \"seuemail@exemplo.com\"\n\n\n\nO Git foi originalmente desenvolvido para ser usado no Linux, um sistema operacional do tipo Unix, por isso é natural que ele use uma interface de linha de comando baseada em Unix. Abaixo algumas funções úteis:\n\nls: Lista o conteúdo do diretório corrente;\npwd: significa “print working directory”, este comando retorna o caminho absoluto do diretório atual;\ncd: significa “change directory”e é usado para mudar o diretório atual. Em Unix, cd . representa o diretório atual e cd .. representa o diretório pai;\ntouch: atualiza a data de um arquivo (o cria, se não existir).\n\n\n\n\nCommit atômico é um conceito em controle de versão que sugere na qual cada commit deve ser uma unidade pequena e que todos os seus arquivos estejam dentro do mesmo contexto. Isso significa que cada commit deve representar uma única alteração lógica no código - seja corrigindo um bug ou adicionando uma nova funcionalidade.\nOs commits atômicos são uma prática recomendada em controle de versão e são importantes por várias razões:\n\nFacilita o entendimento do histórico do projeto;\nTorna a resolução de conflitos mais fácil;\nPermite reverter mudanças facilmente;\nFacilita a revisão de código;\n\nAlerta: Dentro de um repositório Git, não se deve criar outro repositório Git. Isso ocorre porque o Git trata todo o diretório do repositório como uma unidade indivisível e não suporta a criação de repositórios dentro dele. Criar outro repositório Git dentro de um repositório existente pode levar a vários problemas e erros, pois o Git não foi projetado para lidar com aninhamento de repositórios. Aqui estão alguns possíveis erros que podem ocorrer: conflitos de versionamento, problemas de sincronização, dificuldades na colaboração e perda de dados. Para verificar se você está criando indevidamente um repositório dentro de um repositório existente, você pode executar o seguinte comando no terminal dentro do diretório do seu projeto: git status."
  },
  {
    "objectID": "posts/0004-Git-Dicas-e-Truques-pt/index.html#branches",
    "href": "posts/0004-Git-Dicas-e-Truques-pt/index.html#branches",
    "title": "Git: Dicas e Truques",
    "section": "",
    "text": "No Git, uma branch é uma linha de desenvolvimento separada que permite que você trabalhe em recursos ou correções de bugs sem interferir no código principal. Cada branch é uma ramificação independente do histórico de commits e pode ser mesclada (merged) com outras branches posteriormente. As branches são úteis para organizar o trabalho em equipe, permitindo que várias pessoas trabalhem em diferentes partes do projeto simultaneamente.\nAqui estão alguns dos principais comandos relacionados a branches no Git, juntamente com suas descrições:\n\ngit branch: Exibe uma lista de todas as branches no repositório. O asterisco (*) indica a branch atualmente ativa.\ngit branch &lt;nome_branch&gt;: Cria uma nova branch com o nome especificado.\ngit switch &lt;nome_branch&gt;: É um comando projetado para a tarefa de mudar de branch, simplificando o uso em relação ao git checkout. O git switch não executa ações adicionais, apenas muda a branch atual.\ngit switch -c &lt;nome_branch&gt;: cria uma nova branch a partir da branch atual e muda para ela, tudo em um único comando, permitindo que você crie e mude para uma nova branch de forma rápida e conveniente.\ngit merge &lt;nome_branch&gt;: Incorpora as alterações da branch especificada na branch atual. Isso cria um novo commit de merge no histórico.\ngit branch -d &lt;nome_branch&gt;: Exclui a branch especificada após mesclá-la com sucesso em outra branch.\ngit branch -D &lt;nome_branch&gt;: Força a exclusão da branch especificada, mesmo que as alterações não tenham sido mescladas.\ngit branch -m &lt;nome_antigo&gt; &lt;nome_novo&gt;: Renomeia a branch especificada.\ngit branch -r: Exibe uma lista das branches remotas disponíveis.\ngit push &lt;origin&gt; &lt;nome_branch&gt;: Envia a branch especificada para o repositório remoto.\ngit pull &lt;origin&gt; &lt;nome_branch&gt;: Atualiza a branch local com as alterações mais recentes do repositório remoto.\ngit log: é um comando usado no sistema de controle de versão Git que exibe um histórico de commits que levaram ao estado atual do código. Ele mostra o autor, a data e a mensagem do commit, ajudando a rastrear as mudanças e entender a evolução do projeto.\n\n\n\n\ngit commit -a -m: adiciona automaticamente todas as alterações nos arquivos rastreados e faz um commit com uma mensagem específica, permitindo que você realize o commit rapidamente sem precisar usar o comando git add separadamente;\ngit init: cria um novo repositório do Git. Ele pode ser usado para converter um projeto existente e não versionado em um repositório do Git ou inicializar um novo repositório vazio.\ngit diff branch1..branch2: Compara a ponta das duas ramificações (branch), para visualizar as modificações;\ngit checkout HEAD\\~1: é um comando do Git usado para alterar o estado do repositório Git para o commit anterior ao commit atual;\ngit --version: isso deve retornar a versão do Git que você instalou;\nctrl + l: é o comando no teclado que limpa a tela do terminal do git."
  },
  {
    "objectID": "posts/0004-Git-Dicas-e-Truques-pt/index.html#git-restore",
    "href": "posts/0004-Git-Dicas-e-Truques-pt/index.html#git-restore",
    "title": "Git: Dicas e Truques",
    "section": "",
    "text": "A partir da versão 2.23 do Git, o comando git restore é usado para restaurar conteúdos de arquivos no diretório de trabalho e na área de preparação (staging area) do Git. Ele pode ser usado para descartar modificações em arquivos que ainda não foram confirmadas em um commit ou para recuperar arquivos excluídos.\nA sintaxe básica do comando git restore é a seguinte:\ngit restore &lt;opções&gt; &lt;arquivo&gt;\nO comportamento exato do comando git restore pode variar dependendo da versão do Git que você está utilizando. É recomendado verificar a documentação oficial do Git ou executar git restore --help para obter informações detalhadas sobre as opções e comportamentos específicos da versão do Git que você está utilizando."
  },
  {
    "objectID": "posts/0004-Git-Dicas-e-Truques-pt/index.html#git-reset",
    "href": "posts/0004-Git-Dicas-e-Truques-pt/index.html#git-reset",
    "title": "Git: Dicas e Truques",
    "section": "",
    "text": "O comando git reset é usado no Git para alterar a posição do branch (ramificação) atual e desfazer commits. Ele permite reverter o histórico do Git, descartando commits anteriores ou movendo o branch para um commit específico.\nExistem diferentes opções de uso do comando git reset. Aqui estão algumas das formas comuns de uso:\nReset “soft” (suave): O comando git reset --soft desfaz o commit mais recente, mas mantém as alterações do commit no diretório de trabalho e na área de preparação (staging area). Isso permite que você faça alterações adicionais e faça um novo commit com as alterações corrigidas. css Copy code git reset –soft HEAD~1\nReset “mixed” (padrão): O comando git reset --mixeddesfaz o commit mais recente e remove as alterações do commit da área de preparação (staging area), mas mantém as alterações no diretório de trabalho. Isso permite que você revise as alterações novamente e escolha quais arquivos deseja preparar para um novo commit. css Copy code git reset –mixed HEAD~1\nReset “hard” (rígido): O comando git reset --hard desfaz completamente o commit mais recente, descartando todas as alterações do commit e do diretório de trabalho. Isso reverte o repositório Git para o estado do commit anterior e exclui todas as alterações não confirmadas. É importante ressaltar que, ao usar o comando git reset, os commits desfeitos são excluídos permanentemente do histórico. Portanto, tenha cuidado ao usá-lo e verifique se você tem um backup ou está confortável em perder esses commits.\nRecomenda-se verificar a documentação oficial do Git ou executar git reset --help para obter informações detalhadas sobre as opções e comportamentos específicos do comando “git reset” na versão do Git que você está utilizando."
  },
  {
    "objectID": "posts/0004-Git-Dicas-e-Truques-pt/index.html#git-revert",
    "href": "posts/0004-Git-Dicas-e-Truques-pt/index.html#git-revert",
    "title": "Git: Dicas e Truques",
    "section": "",
    "text": "O comando “git revert” é usado no Git para criar um novo commit que desfaz as alterações de um ou mais commits anteriores. Ao contrário do comando “git reset”, que remove os commits do histórico, o “git revert” desfaz as alterações de um commit existente criando um novo commit que reverte as modificações introduzidas.\nA sintaxe básica do comando git revert é a seguinte:\ngit revert &lt;commit&gt; \nAo executar o comando git revert, o Git cria um novo commit que reverte as alterações introduzidas pelo commit especificado. Esse novo commit é adicionado ao histórico, desfazendo as modificações feitas pelo commit original, mas preservando o histórico completo do projeto.\nO comando git revert pode aceitar várias opções para personalizar o comportamento:\n\nn ou –no-commit: Realiza a revert sem criar automaticamente um novo commit. Isso permite que você faça alterações adicionais antes de confirmar as reversões em um novo commit.\nm parent-number: Especifica qual parente de um commit de merge deve ser revertido. O parente é numerado a partir de 1, e o commit de merge é especificado usando seu hash.\ns ou –signoff: Adiciona uma assinatura digital na mensagem de confirmação do revert.\n\nEssas são apenas algumas opções comuns, e há mais opções disponíveis. Recomenda-se consultar a documentação oficial do Git ou executar git revert --help para obter informações mais detalhadas sobre as opções e comportamentos específicos do comando git revert na versão do Git que você está utilizando.\nO git revert é uma maneira segura de desfazer alterações em commits anteriores sem alterar o histórico do projeto, sendo útil quando você deseja manter um registro completo de todas as alterações e garantir que a colaboração no projeto não seja afetada."
  },
  {
    "objectID": "posts/0004-Git-Dicas-e-Truques-pt/index.html#git-stash",
    "href": "posts/0004-Git-Dicas-e-Truques-pt/index.html#git-stash",
    "title": "Git: Dicas e Truques",
    "section": "",
    "text": "O comando “git stash” é uma funcionalidade do sistema de controle de versão Git que permite aos desenvolvedores salvar temporariamente as alterações feitas em seu repositório de trabalho, sem precisar fazer um commit completo. O “stash” pode ser visto como uma área de armazenamento temporário para alterações não concluídas.\nPosteriormente, quando desejar retomar as alterações salvas, você pode usar os comandos git stash list para ver a lista de stashes disponíveis e git stash apply ou git stash pop para aplicar novamente as alterações salvas no seu diretório de trabalho. A diferença entre os comandos “apply” e “pop” é que o “apply” mantém o stash na lista, enquanto o “pop” remove o stash após aplicar as alterações."
  },
  {
    "objectID": "posts/0004-Git-Dicas-e-Truques-pt/index.html#git-reflog",
    "href": "posts/0004-Git-Dicas-e-Truques-pt/index.html#git-reflog",
    "title": "Git: Dicas e Truques",
    "section": "",
    "text": "O git reflog é um comando útil do Git que registra quando as pontas dos ramos e outras referências foram atualizadas no repositório local. Ele ajuda você a entender a história de um repositório de uma maneira mais granular do que git log, porque também registra quando você faz checkout para outro ramo, quando um commit é alterado (por exemplo, com git commit --amend), e assim por diante.\nSegue alguns usos comuns do git reflog:\n\nRecuperação de commits perdidos: O Git tem um sistema de garbage collection que limpa commits inacessíveis de tempos em tempos, mas antes disso, você pode usar o git reflog para encontrar commits perdidos. Isso é útil quando você exclui um ramo por engano, por exemplo.\nDesfazer rebase: Um comando git rebase pode ser uma operação complicada que às vezes dá errado. Se você deseja desfazer um rebase, pode usar o git reflog para encontrar o estado do seu ramo antes do rebase e retornar a esse estado.\n\nO comando git reflog exibe uma lista de todos os pontos na história do seu HEAD. Para cada entrada, ele mostra um hash de commit, a ação que levou a esse estado (como um commit, rebase, checkout etc.), e uma referência para essa entrada na forma de HEAD@{n}, onde n é o número de passos atrás nesse ponto na história.\nO git reflog mantém um registro das últimas ações no Git que modificaram o HEAD, incluindo commits, checkouts e outros. Por padrão, o Git mantém esses registros por 90 dias. Esse período de 90 dias é chamado de período de “expiração” do reflog."
  },
  {
    "objectID": "posts/0004-Git-Dicas-e-Truques-pt/index.html#rebasing-x-merging",
    "href": "posts/0004-Git-Dicas-e-Truques-pt/index.html#rebasing-x-merging",
    "title": "Git: Dicas e Truques",
    "section": "",
    "text": "Rebasing” e “Merging” são duas estratégias diferentes no Git para integrar mudanças de uma branch (ramificação) para outra. Ambos são usados para manter o seu código sincronizado com o trabalho de outros desenvolvedores, mas funcionam de maneiras ligeiramente diferentes e são melhores em situações diferentes.\n\nRebasing (Rebase): O comando git rebase move ou combina uma sequência de commits para uma nova base de commit. Ele é útil para fazer sua feature branch “atualizada” com as últimas mudanças de outra branch (como a main ou master). Com o rebase, os commits da feature branch são aplicados na branch base, um por um, como se eles tivessem sido criados de novo. Isso resulta em um histórico de commits linear, o que pode ser mais fácil de entender.\nMerging (Merge): O comando git merge pega o conteúdo de uma branch de origem e a integra com a branch de destino. Um novo commit de merge é criado que aponta para os dois commits, preservando o histórico de commits e a relação entre as branches. Isso mantém a história completa do projeto, incluindo todas as ramificações e mesclagens, mas pode ser mais difícil de navegar devido à sua não linearidade.\n\nA diferença principal entre os dois (rebase e merge) é que o rebase cria um histórico de commits linear, “recriando” os commits, enquanto o merge preserva o histórico exato e cria um novo commit de merge. A escolha entre um e outro depende de fatores como a complexidade do projeto, a necessidade de manter um histórico limpo e linear versus um histórico completo e exato, e as preferências da equipe.\nO comando git rebase -i HEAD é utilizado para iniciar um processo de rebase interativo. O rebase interativo é uma funcionalidade do Git que permite modificar uma sequência de commits existente de várias formas. A opção -i no comando significa “interativo”, o que significa que o Git abrirá um editor de texto com uma lista dos últimos commits, permitindo que você escolha exatamente o que quer fazer com cada um.\nO termo HEAD é uma referência ao commit mais recente na branch atual. Portanto, git rebase -i HEAD começará um rebase interativo que, por padrão, não inclui nenhum commit, pois você está tentando rebase na mesma posição do HEAD. Normalmente, você especificaria um número de commits antes do HEAD ou uma referência a outro commit, como HEAD~3 ou HEAD^, para iniciar um rebase interativo dos últimos 3 commits ou do último commit, respectivamente.\nDurante um rebase interativo, você pode fazer várias coisas, como:\n\npick: usar um commit como está.\nreword: usar o commit, mas alterar a mensagem do commit.\nedit: usar o commit, mas parar para que você possa modificar os arquivos e/ou o commit.\nsquash: usar as alterações do commit, mas mesclá-las com o commit anterior.\nfixup: como “squash”, mas descarta a mensagem do commit.\ndrop: descartar o commit. Essa flexibilidade faz do rebase interativo uma ferramenta poderosa para limpar o histórico de commits antes de compartilhar suas alterações com outros."
  },
  {
    "objectID": "posts/0004-Git-Dicas-e-Truques-pt/index.html#git-tags",
    "href": "posts/0004-Git-Dicas-e-Truques-pt/index.html#git-tags",
    "title": "Git: Dicas e Truques",
    "section": "",
    "text": "As tags no Git são referências que apontam para pontos específicos no histórico de commits. Elas são usados geralmente para capturar um ponto na história que é marcado por uma versão de lançamento de software, por exemplo, v1.0, v2.0, etc.\nExistem dois tipos principais de tags no Git:\n\nLightweight (Leve): É simplesmente uma referência a um commit. As tags leves não incluem nenhuma informação extra além do commit em si. Para criar uma tag leve, você pode usar o comando git tag seguido do nome da tag e a referência do commit.\nAnnotated (Anotada): São armazenadas como objetos completos no banco de dados Git, o que significa que eles incluem informações extras como o tagger (a pessoa que fez a tag), a data, a mensagem e podem ser verificadas com GPG. As tags anotadas são recomendadas porque incluem essa informação extra. Você pode criar uma tag anotada com o comando git tag -a, seguido do nome da tag, e geralmente uma mensagem de descrição é adicionada.\n\nAs tags não são movidas quando novos commits são criados, elas continuam apontando para o mesmo commit mesmo quando novos commits são adicionados ao repositório. Isso torna as tags úteis para marcar versões específicas de um projeto.\nVocê pode ver todas as tags em um repositório com o comando git tag. E para compartilhar tags com outros repositórios, elas precisam ser explicitamente “pushed” para o repositório remoto, usando o comando git push origin \\[tagname\\] ou git push origin --tags para enviar todas as tags.\nMudar e deletar tags no Git é bastante simples: Para mudar uma tag, primeiro você deve deletá-la e então recriá-la apontando para o novo commit. Por exemplo, se você tem uma tag chamada “v1.0” e quer mudá-la para apontar para um commit diferente, você pode fazer isso da seguinte maneira:\ngit tag -d &lt;nome-da-tag&gt;\nSe a tag tiver sido enviada para o repositório remoto, você precisará removê-la do repositório remoto também. Para fazer isso, use o seguinte comando:\ngit push --delete origin &lt;nome-da-tag&gt;\nLembre-se de que, uma vez que a tag seja deletada e a informação seja propagada para outros clones do repositório, não haverá nenhuma referência ao commit original marcado pela tag. Então, tenha certeza antes de deletar uma tag, especialmente se ela foi compartilhada com outros."
  },
  {
    "objectID": "posts/0004-Git-Dicas-e-Truques-pt/index.html#git-config",
    "href": "posts/0004-Git-Dicas-e-Truques-pt/index.html#git-config",
    "title": "Git: Dicas e Truques",
    "section": "",
    "text": "O comando git config é uma parte essencial do Git, usado para configurar as opções específicas do usuário, como email, algoritmo preferido para diff, nome de usuário e tipo de formato, entre outras coisas. Essas informações são armazenadas em três locais diferentes:\n\n/etc/gitconfig: Contém valores para todos os usuários no sistema e todos os seus repositórios. Se você passar a opção –system para git config, ele lê e escreve a partir deste arquivo.\n~/.gitconfig ou ~/.config/git/config: Especificamente para você, o usuário logado. Você pode fazer o Git ler e escrever para este arquivo passando a opção –global.\nconfig no diretório Git (ou seja, .git/config) de qualquer repositório que você esteja usando: Específico para esse único repositório. Cada nível sobrescreve os valores no nível anterior, então valores em .git/config têm precedência sobre /etc/gitconfig.\n\nO comando git config --list lista as configurações do Git que estão atualmente configuradas."
  },
  {
    "objectID": "posts/0004-Git-Dicas-e-Truques-pt/index.html#objetos-git",
    "href": "posts/0004-Git-Dicas-e-Truques-pt/index.html#objetos-git",
    "title": "Git: Dicas e Truques",
    "section": "",
    "text": "O Git é um sistema de controle de versão que mantém o histórico de alterações em arquivos e diretórios em um repositório. Para fazer isso, o Git usa um sistema de armazenamento de objetos que contém quatro tipos principais de objetos: blob, tree, commit e tag.\n1. Blob: O tipo de objeto mais básico no Git é o blob. Um objeto blob é um arquivo com dados, mas sem metadados (como nome de arquivo ou permissões). Cada versão de cada arquivo em seu repositório Git é armazenada como um objeto blob separado.\n2. Tree: Um objeto de tree (árvore) no Git é essencialmente análogo a um diretório. Ele representa uma estrutura de diretório de arquivos e outros diretórios. Um objeto tree contém um ou mais entradas de tree, cada uma das quais contém uma referência a um blob ou tree, juntamente com o nome do arquivo, permissões e o bit ‘execute’.\n3. Commit: Um objeto de commit contém metadados para cada alteração introduzida no repositório, incluindo o autor, o committer (que pode ser diferente do autor), a mensagem de commit e um ponteiro para o objeto tree que representa a estrutura de diretório de nível superior para o projeto. Cada commit também contém um ou mais ponteiros para os commit(s) pai(s) que representam o(s) estado(s) anterior(es) do projeto.\n4. Tag: Uma tag é uma referência a um objeto de commit, usada geralmente para marcar pontos específicos no histórico do repositório como uma versão específica de um projeto. Tags podem ser leves (apontando diretamente para um commit) ou anotadas (armazenadas como objetos completos com um apontador para um commit, um nome de tag, uma mensagem de tag e um tagger).\nEsses quatro tipos de objetos (blob, tree, commit e tag), juntamente com referências que apontam para objetos de commit (como branches e HEAD), formam a estrutura fundamental do sistema de armazenamento de dados do Git."
  },
  {
    "objectID": "posts/0004-Git-Dicas-e-Truques-pt/index.html#excluir-um-repositório-git",
    "href": "posts/0004-Git-Dicas-e-Truques-pt/index.html#excluir-um-repositório-git",
    "title": "Git: Dicas e Truques",
    "section": "",
    "text": "Se surgir a necessidade de excluir um repositório Git e manter os arquivos, você pode fazer isso excluindo a pasta oculta .git, que é onde todas as informações do repositório Git são armazenadas. Porém, tenha muito cuidado, pois isso removerá todo o histórico de versões do Git para este repositório. Siga os passos abaixo para excluir o repositório Git:\n1- Navegue até o diretório que contém o repositório Git que você deseja excluir.\ncd /caminho/para/o/diretorio\n2- Exclua a pasta .git dentro desse diretório.\nrm -rf .git"
  },
  {
    "objectID": "posts/0004-Git-Dicas-e-Truques-pt/index.html#diferentes-contas-git-para-diferentes-projetos",
    "href": "posts/0004-Git-Dicas-e-Truques-pt/index.html#diferentes-contas-git-para-diferentes-projetos",
    "title": "Git: Dicas e Truques",
    "section": "",
    "text": "Configurar duas contas Git para diferentes projetos pode ser feito de forma automática usando a funcionalidade de “inclusão condicional” no arquivo de configuração do Git (~/.gitconfig). Primeiro, é necessário configurar globalmente sua conta principal do Git com seu nome de usuário e email usando o comando git config. Em seguida, você pode criar uma inclusão condicional no arquivo ~/.gitconfig para especificar a configuração da segunda conta com base no diretório do projeto. Ao navegar para a pasta do segundo projeto, o Git utilizará automaticamente as configurações definidas para essa conta específica, como o nome do usuário e o email, enquanto em outros projetos continuará usando as configurações globais da primeira conta. Isso simplifica a gestão de várias contas Git em diferentes projetos, garantindo que as credenciais corretas sejam usadas em cada caso, sem a necessidade de alternar manualmente entre elas.\nPara criar a inclusão condicional no arquivo de configuração global, abra o arquivo de configuração do Git global ~/.gitconfig em um editor de texto. Adicione ou edite a seção [includeIf] da seguinte forma:\n[includeIf \"gitdir:/caminho/para/sua/segunda/pasta/\"]\npath = ~/.gitconfig-segunda-conta\nPara configurar contas do GitHub diferentes com o Git de forma automática, você pode utilizar o mesmo conceito de inclusão condicional, para mais detalhes de como fazer nos links abaixo:\n\nManage Multiple GitHub Accounts\nSteps to Set Up Multiple GitHub"
  },
  {
    "objectID": "posts/0004-Git-Dicas-e-Truques-pt/index.html#integração-com-plataformas-de-hospedagem",
    "href": "posts/0004-Git-Dicas-e-Truques-pt/index.html#integração-com-plataformas-de-hospedagem",
    "title": "Git: Dicas e Truques",
    "section": "",
    "text": "GitHub, Bitbucket e GitLab são plataformas baseadas em nuvem que fornecem hospedagem de repositórios Git, permitindo que os desenvolvedores armazenem e compartilhem seus códigos, colaborem em projetos e rastreiem e controlem alterações no código. GitHub é a plataforma mais popular, hospedando milhões de repositórios de desenvolvedores e organizações em todo o mundo. Ele não só suporta controle de versão Git, mas também fornece funcionalidades adicionais, como pull requests, issues de rastreamento, actions para automação de CI/CD e integração com muitas outras ferramentas e plataformas.\nCopiando (clonar) um repositorio existente:\ngit clone https://github.com/user/example.git\n\ngit clone: Este comando é usado para criar uma cópia local de um repositório remoto. Quando você executa git clone, o Git cria um novo diretório no seu sistema local, inicializa um repositório Git nesse diretório, puxa todo o histórico de commits do repositório remoto e verifica o último commit para o seu diretório de trabalho. Basicamente, é uma maneira de obter uma cópia completa de um projeto existente.\ngit remote: Este comando é usado para gerenciar as conexões com repositórios remotos. Ele permite que você crie, visualize e delete conexões para outros repositórios. Quando você clona um repositório, o Git automaticamente adiciona esse repositório como um “remote” chamado “origin”, permitindo que você interaja com o repositório original a partir do qual você clonou. Você pode adicionar mais remotos usando o comando git remote add, e pode sincronizar suas alterações com remotos usando comandos como git push e git pull.\ngit remote add usptream: Quando você adiciona um “upstream” ao seu repositório Git, você está criando uma conexão com um repositório remoto a partir do qual você deseja buscar ou puxar mudanças. Isso é útil, por exemplo, quando você fez um “fork” de um repositório em um serviço como o GitHub, e quer manter o seu fork sincronizado com as alterações do repositório original.Depois de adicionar o upstream, você pode buscar as alterações do repositório original com ‘git fetch upstream’, e pode mesclar essas alterações em sua branch atual com ‘git merge upstream/branch_name’.\ngit fetch: Este comando baixa as alterações do repositório remoto para o seu repositório local, mas não as mescla com o seu código nem modifica o seu código atual. Isso permite que você veja as alterações recentes no repositório remoto, sem misturá-las com o seu trabalho atual. Se você quiser integrar as mudanças no seu código, você precisará fazer um git merge após o fetch.\ngit pull: Este comando é essencialmente uma combinação degit fetch seguido de git merge. Ou seja, ele baixa as alterações do repositório remoto e as mescla automaticamente com o seu código atual. É útil quando você sabe que quer atualizar o seu código para corresponder ao estado mais recente do repositório remoto.\n\nA integração dessas plataformas baseadas em nuvem com o Git permite a colaboração e o controle de versão eficientes, facilitando o desenvolvimento de software ágil e o uso de práticas de DevOps. Além disso, elas também desempenham um papel crítico no suporte a equipes remotas, já que os desenvolvedores podem colaborar em projetos independentemente de sua localização geográfica.\n“Fetching” e “Pulling” são dois conceitos importantes no Git relacionados à obtenção de dados de repositórios remotos. A diferença entre os dois é que git fetch permite que você veja as alterações antes de decidir se quer integrá-las ou não, enquanto git pull baixa as alterações e as mescla com o seu código imediatamente (Fig. 01)."
  },
  {
    "objectID": "posts/0005-Poker-pt/index.html",
    "href": "posts/0005-Poker-pt/index.html",
    "title": "Lições do Pôquer para Cientistas de Dados",
    "section": "",
    "text": "O pôquer, com suas raízes remontando a vários jogos europeus do século XVIII, evoluiu ao longo dos séculos para se tornar um dos jogos de cartas mais populares e estratégicos do mundo. Sua história é rica e diversificada, refletindo uma mistura de influências culturais e estilos de jogo.\n\n\n\nFig.01 - Lições do poker para análise de dados.\n\n\nJogar pôquer pode ser benéfico para compreender a ciência de dados, pois ambos compartilham fundamentos em análise estratégica, tomada de decisão sob incerteza e interpretação de padrões complexos. No pôquer, os jogadores são constantemente desafiados a tomar decisões baseadas em informações incompletas e probabilidades, um exercício que está diretamente ligado ao trabalho de um cientista de dados ao modelar e prever a partir de conjuntos de dados imperfeitos. Além disso, o pôquer aprimora habilidades de gerenciamento de risco e avaliação de variáveis desconhecidas - competências essenciais na construção de modelos de dados robustos e na tomada de decisões baseadas em dados. A natureza dinâmica do pôquer, que exige adaptação rápida a novas informações e situações, reflete o ambiente em constante mudança da ciência de dados, onde os profissionais devem se adaptar a novas tecnologias, algoritmos e insights de dados.\n\n\nJogar pôquer pode ser uma experiência enriquecedora, não apenas em termos de entretenimento, mas também no desenvolvimento de várias habilidades úteis. Abaixo algumas dessas habilidades:\n\nAnálise e Tomada de Decisão Estratégica: Pôquer é um jogo de estratégia e decisão. Os jogadores devem avaliar constantemente suas mãos, as ações dos adversários e as probabilidades para tomar decisões informadas.\nGerenciamento de Riscos e Controle de Impulsos: No pôquer, é crucial saber quando apostar, aumentar ou desistir. Isso requer uma avaliação cuidadosa do risco e a habilidade de controlar impulsos, evitando decisões precipitadas.\nHabilidades Matemáticas e Probabilísticas: Jogar pôquer melhora a capacidade de cálculo rápido, especialmente em relação a probabilidades e pot odds (razão entre o tamanho do pote e o valor da aposta).\nLeitura de Pessoas e Compreensão de Psicologia: Um aspecto importante do pôquer é a habilidade de ler os outros jogadores, compreender suas estratégias e intenções, e antecipar seus movimentos.\nPaciência e Disciplina: O pôquer exige paciência, pois nem todas as mãos são jogáveis, e a disciplina para manter uma estratégia consistente, mesmo em situações adversas.\nGestão de Recursos (Bankroll Management): Os jogadores aprendem a gerenciar seu dinheiro de forma eficaz, tomando decisões sobre quanto apostar e quando se afastar de um jogo.\nResiliência e Lidar com a Perda: No pôquer, a perda é uma parte natural do jogo. Aprender a lidar com essas perdas, não se deixar abater e se recuperar para o próximo jogo é uma habilidade valiosa.\nFoco e Concentração: Durante um jogo, os jogadores precisam manter um alto nível de foco e concentração, observando as ações dos adversários e mantendo-se atentos às mudanças no jogo.\nHabilidades Sociais e Comunicação: Jogar pôquer, especialmente em ambientes físicos, promove a interação social e o desenvolvimento de habilidades de comunicação, à medida que os jogadores interagem uns com os outros.\nFlexibilidade e Adaptação: No pôquer, as situações mudam rapidamente, exigindo dos jogadores a capacidade de se adaptar a novas informações e condições de jogo.\n\n\n\n\nPortanto, além de ser uma forma de entretenimento, o pôquer pode ser uma ferramenta eficaz para desenvolver uma variedade de habilidades cognitivas e sociais. Ao integrar as habilidades desenvolvidas no pôquer, os aprendizes e praticantes de Ciência de dados podem ganhar uma perspectiva valiosa sobre como navegar na incerteza, interpretar dados complexos e tomar decisões estratégicas.\n\n\n\nSe você se interessou pelas relações entre o pôquer e ciência de dados e gostaria de ver esses conceitos em ação, convido você a explorar meu projeto no Github e Shiny na qual consiste a simulação de jogos e uma análise detalhada das probabilidades envolvidas, sendo útil tanto para os jogadores iniciantes quanto para os mais experientes interessados em refinar suas estratégias.\n\nProjeto no GitHub: Visite https://github.com/nionmaron/Poker-Probability para ter acesso ao código-fonte, entender mais sobre o desenvolvimento do projeto e, se desejar, contribuir para sua evolução.\nAplicativo Shiny de probabilidades do Poker (desktop): Para uma experiência prática do projeto, acesse o aplicativo diretamente através de https://nionmaron.shinyapps.io/poker_app_shiny/. Aqui, você pode testar jogos de pôquer na modalidade Texas Hold’em e ver as análises de probabilidades ao longo da sequência de cartas (Pre-Flop ➔ Flop ➔ Turn ➔ River). Sua experiência com o app e qualquer feedback será valioso para futuras melhorias.\n#DataDrivenPoker #PokerAnalytics #StrategicData #StatisticalPoker"
  },
  {
    "objectID": "posts/0005-Poker-pt/index.html#habilidades-desenvolvidas",
    "href": "posts/0005-Poker-pt/index.html#habilidades-desenvolvidas",
    "title": "Lições do Pôquer para Cientistas de Dados",
    "section": "",
    "text": "Jogar pôquer pode ser uma experiência enriquecedora, não apenas em termos de entretenimento, mas também no desenvolvimento de várias habilidades úteis. Abaixo algumas dessas habilidades:\n\nAnálise e Tomada de Decisão Estratégica: Pôquer é um jogo de estratégia e decisão. Os jogadores devem avaliar constantemente suas mãos, as ações dos adversários e as probabilidades para tomar decisões informadas.\nGerenciamento de Riscos e Controle de Impulsos: No pôquer, é crucial saber quando apostar, aumentar ou desistir. Isso requer uma avaliação cuidadosa do risco e a habilidade de controlar impulsos, evitando decisões precipitadas.\nHabilidades Matemáticas e Probabilísticas: Jogar pôquer melhora a capacidade de cálculo rápido, especialmente em relação a probabilidades e pot odds (razão entre o tamanho do pote e o valor da aposta).\nLeitura de Pessoas e Compreensão de Psicologia: Um aspecto importante do pôquer é a habilidade de ler os outros jogadores, compreender suas estratégias e intenções, e antecipar seus movimentos.\nPaciência e Disciplina: O pôquer exige paciência, pois nem todas as mãos são jogáveis, e a disciplina para manter uma estratégia consistente, mesmo em situações adversas.\nGestão de Recursos (Bankroll Management): Os jogadores aprendem a gerenciar seu dinheiro de forma eficaz, tomando decisões sobre quanto apostar e quando se afastar de um jogo.\nResiliência e Lidar com a Perda: No pôquer, a perda é uma parte natural do jogo. Aprender a lidar com essas perdas, não se deixar abater e se recuperar para o próximo jogo é uma habilidade valiosa.\nFoco e Concentração: Durante um jogo, os jogadores precisam manter um alto nível de foco e concentração, observando as ações dos adversários e mantendo-se atentos às mudanças no jogo.\nHabilidades Sociais e Comunicação: Jogar pôquer, especialmente em ambientes físicos, promove a interação social e o desenvolvimento de habilidades de comunicação, à medida que os jogadores interagem uns com os outros.\nFlexibilidade e Adaptação: No pôquer, as situações mudam rapidamente, exigindo dos jogadores a capacidade de se adaptar a novas informações e condições de jogo."
  },
  {
    "objectID": "posts/0005-Poker-pt/index.html#conclusão",
    "href": "posts/0005-Poker-pt/index.html#conclusão",
    "title": "Lições do Pôquer para Cientistas de Dados",
    "section": "",
    "text": "Portanto, além de ser uma forma de entretenimento, o pôquer pode ser uma ferramenta eficaz para desenvolver uma variedade de habilidades cognitivas e sociais. Ao integrar as habilidades desenvolvidas no pôquer, os aprendizes e praticantes de Ciência de dados podem ganhar uma perspectiva valiosa sobre como navegar na incerteza, interpretar dados complexos e tomar decisões estratégicas."
  },
  {
    "objectID": "posts/0005-Poker-pt/index.html#explore-mais-e-colabore",
    "href": "posts/0005-Poker-pt/index.html#explore-mais-e-colabore",
    "title": "Lições do Pôquer para Cientistas de Dados",
    "section": "",
    "text": "Se você se interessou pelas relações entre o pôquer e ciência de dados e gostaria de ver esses conceitos em ação, convido você a explorar meu projeto no Github e Shiny na qual consiste a simulação de jogos e uma análise detalhada das probabilidades envolvidas, sendo útil tanto para os jogadores iniciantes quanto para os mais experientes interessados em refinar suas estratégias.\n\nProjeto no GitHub: Visite https://github.com/nionmaron/Poker-Probability para ter acesso ao código-fonte, entender mais sobre o desenvolvimento do projeto e, se desejar, contribuir para sua evolução.\nAplicativo Shiny de probabilidades do Poker (desktop): Para uma experiência prática do projeto, acesse o aplicativo diretamente através de https://nionmaron.shinyapps.io/poker_app_shiny/. Aqui, você pode testar jogos de pôquer na modalidade Texas Hold’em e ver as análises de probabilidades ao longo da sequência de cartas (Pre-Flop ➔ Flop ➔ Turn ➔ River). Sua experiência com o app e qualquer feedback será valioso para futuras melhorias."
  },
  {
    "objectID": "posts/data-driven-pt/index.html",
    "href": "posts/data-driven-pt/index.html",
    "title": "O que é ‘Data Driven ?’",
    "section": "",
    "text": "#DataDriven #BigData #DataScience #DataAnalytics #BusinessIntelligence #DecisionMaking #DigitalTransformation #DataStrategy"
  },
  {
    "objectID": "posts/data-driven-pt/index.html#como-surgiu",
    "href": "posts/data-driven-pt/index.html#como-surgiu",
    "title": "O que é ‘Data Driven ?’",
    "section": "Como surgiu?",
    "text": "Como surgiu?\nO Data Driven surgiu como extensão da ciência de dados, campo do conhecimento que utiliza métodos científicos e algoritmos para transformar dados – estruturados e não estruturados – em conhecimento."
  },
  {
    "objectID": "posts/data-driven-pt/index.html#benefícios",
    "href": "posts/data-driven-pt/index.html#benefícios",
    "title": "O que é ‘Data Driven ?’",
    "section": "Benefícios",
    "text": "Benefícios\nA implantação de uma cultura Data Driven pode trazer uma série de benefícios para qualquer organização. Estes são alguns dos principais motivos para considerar esta abordagem:\nTomada de decisão baseada em evidências: Com dados confiáveis e precisos, você pode tomar decisões mais informadas e baseadas em evidências, reduzindo o risco e a incerteza.\nMelhor compreensão do negócio: A análise de dados pode revelar padrões e tendências que podem ajudar a entender melhor o seu negócio e o ambiente em que opera.\nMaior eficiência operacional: A análise de dados pode identificar ineficiências e gargalos nos processos de negócios, permitindo que você faça melhorias que aumentem a eficiência e reduzam os custos.\nMelhor atendimento ao cliente: Com os dados do cliente, você pode personalizar suas ofertas, melhorar a experiência do cliente e construir relacionamentos mais fortes com seus clientes.\nInovação: Os dados podem inspirar novas ideias, ajudar a identificar oportunidades de inovação e tornar possível testar e validar essas inovações."
  },
  {
    "objectID": "posts/data-driven-pt/index.html#implantação",
    "href": "posts/data-driven-pt/index.html#implantação",
    "title": "O que é ‘Data Driven ?’",
    "section": "Implantação",
    "text": "Implantação\nImplantar uma cultura Data Driven envolve várias etapas, que podem variar dependendo das especificidades de cada organização. No entanto, aqui estão alguns passos gerais que você pode seguir:\n\nDefina seus objetivos: Antes de coletar e analisar os dados, é importante ter uma clara compreensão do que você espera alcançar. Esses objetivos orientarão a coleta, análise e interpretação dos dados.\nColeta de dados: A coleta de dados pode vir de várias fontes, incluindo sistemas internos, redes sociais, pesquisas, entre outros. É importante garantir a qualidade e relevância dos dados coletados.\nAnálise de dados: Isso envolve o processamento dos dados coletados para extrair insights úteis. As ferramentas de análise de dados, como software de business intelligence, podem ser úteis nessa fase.\nImplementação de insights: Os insights derivados dos dados devem ser aplicados à tomada de decisão na organização. Isso pode envolver a criação de novas estratégias, a alteração de processos existentes ou a implementação de novas práticas.\nPromova uma cultura de dados: Para que a orientação por dados seja efetiva, é importante promover uma cultura em que todos na organização entendam a importância dos dados e usem essas informações em seu trabalho. Isso pode envolver treinamento e educação, além da criação de uma estrutura organizacional que suporte a tomada de decisões baseada em dados.\nRevisão e melhoria contínua: Uma vez que a abordagem Data Driven esteja em prática, é importante revisar regularmente o processo e buscar formas de melhorá-lo. Isso pode envolver a coleta de novos tipos de dados, a utilização de melhores ferramentas de análise ou a implementação de melhores práticas de tomada de decisão baseada em dados."
  },
  {
    "objectID": "posts/data-driven-pt/index.html#profissionais",
    "href": "posts/data-driven-pt/index.html#profissionais",
    "title": "O que é ‘Data Driven ?’",
    "section": "Profissionais",
    "text": "Profissionais\nPara desenvolver uma cultura Data Driven em sua organização, você precisará de uma variedade de profissionais que possam ajudar a coletar, gerenciar, analisar e interpretar dados, além de implementar mudanças com base nessas informações. Aqui estão alguns dos papéis principais que você pode precisar:\nCientistas de Dados: Esses profissionais usam técnicas estatísticas e de machine learning para extrair insights dos dados. Eles são capazes de modelar e interpretar conjuntos de dados complexos, e suas habilidades são cruciais para a tomada de decisões baseada em dados.\nEngenheiros de Dados: Eles organizam, limpam, e estruturam os dados para análise. Eles também garantem que os dados sejam coletados de maneira eficiente e armazenados de maneira a serem acessados facilmente.\nAnalistas de Negócios: Esses profissionais são capazes de traduzir os insights dos dados em recomendações práticas para os tomadores de decisão na empresa. Eles devem ser capazes de entender os dados, mas também o contexto do negócio.\nGerentes de Projeto Data Driven: Esses gerentes de projeto têm experiência em gerenciar projetos que envolvem a análise e interpretação de dados. Eles podem ajudar a coordenar os esforços entre os diferentes papéis e garantir que os projetos de análise de dados sejam concluídos com sucesso.\nEspecialistas em Visualização de Dados: Eles são responsáveis por apresentar os dados de uma maneira fácil de entender, geralmente por meio de gráficos, diagramas e outras representações visuais. Isso pode tornar os insights dos dados mais acessíveis para os tomadores de decisão.\nLíder de Transformação de Dados ou Chief Data Officer (CDO): Este é um executivo sênior que supervisiona a estratégia de dados de uma organização. Eles garantem que a organização esteja utilizando seus dados de maneira eficaz e alinhada aos objetivos gerais de negócios.\nAlém desses papéis específicos, é importante que todos na organização tenham uma compreensão básica dos dados e de sua importância. Isso pode exigir algum treinamento ou desenvolvimento profissional, especialmente para aqueles que não estão acostumados a trabalhar com dados."
  },
  {
    "objectID": "posts/data-driven-pt/index.html#conclusões",
    "href": "posts/data-driven-pt/index.html#conclusões",
    "title": "O que é ‘Data Driven ?’",
    "section": "Conclusões",
    "text": "Conclusões\nMuitos especialistas concordam que a abordagem Data Driven é o futuro dos negócios. Estamos na era da informação, onde temos acesso a quantidades cada vez maiores de dados. As empresas que são capazes de aproveitar esses dados para tomar decisões melhores e mais informadas terão uma vantagem competitiva significativa.\nNo entanto, a transição para uma cultura Data Driven não é sem desafios. Exige investimento em tecnologia, mudanças nos processos de negócios e, em muitos casos, uma mudança na cultura da empresa. Mas, apesar desses desafios, o potencial de benefícios torna a transição para um modelo Data Driven uma opção atraente para muitas organizações."
  },
  {
    "objectID": "posts/data-terms-pt/index.html#gestão-e-armazenamento-de-dados",
    "href": "posts/data-terms-pt/index.html#gestão-e-armazenamento-de-dados",
    "title": "Termos com a palavra ‘Data’",
    "section": "Gestão e Armazenamento de Dados",
    "text": "Gestão e Armazenamento de Dados\nBig Data: Um termo que descreve volumes de dados tão grandes que os métodos tradicionais de processamento de dados não conseguem lidar. Big Data é geralmente caracterizado pelos três V’s: Volume, Velocidade e Variedade.\nData Warehouse (Depósito de Dados): Um grande repositório de dados coletados de diferentes fontes e organizados de uma maneira que facilite a análise.\nData Lake (Lago de Dados): Um repositório de armazenamento que contém uma grande quantidade de dados brutos em seu formato natural.\nData Mart (Depósito de Dados Departamental): É um subconjunto de um data warehouse que se concentra em uma área específica de negócios. Diferentemente de um data warehouse, que serve toda a organização, um data mart é mais focado e atende a uma equipe ou departamento específico.\nData Catalog (Catálogo de Dados): É um recurso organizacional que permite que as equipes de dados descubram e usem dados para encontrar insights de negócios. É um repositório para encontrar, entender e confiar em dados corporativos.\nData ingestion (ingestão de dados): É o processo de coleta e importação de dados de diversas fontes para um sistema de armazenamento ou plataforma de processamento de dados.\nMaster Data Management (Gestão de Dados Mestres): É um método de permitir que uma organização vincule todos os seus dados críticos a um arquivo mestre, proporcionando uma referência comum. Quando feito corretamente, os benefícios do MDM podem incluir a eliminação de dados redundantes, a melhoria da qualidade dos dados e a redução de discrepâncias e erros."
  },
  {
    "objectID": "posts/data-terms-pt/index.html#processamento-e-transformação-de-dados",
    "href": "posts/data-terms-pt/index.html#processamento-e-transformação-de-dados",
    "title": "Termos com a palavra ‘Data’",
    "section": "Processamento e Transformação de Dados",
    "text": "Processamento e Transformação de Dados\nData Wrangling (Manipulação de Dados): O processo de limpar, estruturar e enriquecer os dados brutos para fins de análise.\nData Cleaning (Limpeza de Dados): O processo de identificar e corrigir (ou remover) erros nos dados, como entradas incompletas, imprecisas ou irrelevantes.\nData Integration (Integração de Dados): O processo de combinar dados de várias fontes diferentes e fornecer ao usuário uma visão unificada desses dados.\nData Pipeline (Pipeline de Dados): Um data pipeline é uma série de processos de dados através dos quais os dados são movidos de um lugar para outro. Isso pode envolver várias etapas, como coleta, transformação (para converter os dados em um formato útil para análise), e carregamento em um repositório de dados (como um data warehouse ou um data lake). As pipelines de dados são fundamentais para a automação e a eficiência na ciência de dados, permitindo que grandes volumes de dados sejam processados e analisados de forma rápida e eficaz.\nStreaming Data (Dados de Streaming): Refere-se a dados que são gerados continuamente por milhares de fontes de dados, que normalmente enviam os registros de dados simultaneamente em pequenos “pacotes”.\nData Virtualization (Virtualização de Dados): É a abstração, transformação e entrega de dados de qualidade para aplicações de negócios, a partir de várias e diversificadas fontes de dados, de forma on-demand e em tempo real."
  },
  {
    "objectID": "posts/data-terms-pt/index.html#análise-e-mineração-de-dados",
    "href": "posts/data-terms-pt/index.html#análise-e-mineração-de-dados",
    "title": "Termos com a palavra ‘Data’",
    "section": "Análise e Mineração de Dados",
    "text": "Análise e Mineração de Dados\nData Mining (Mineração de Dados): O processo de descobrir padrões e conhecimentos úteis a partir de grandes conjuntos de dados.\nTime-series Data (Dados de Séries Temporais): Um conjunto de pontos de dados coletados ou registrados em intervalos de tempo regulares.\nData Profiling (Perfilamento de Dados): É o processo de examinar, analisar e rever os dados disponíveis em um banco de dados existente para coletar estatísticas e informações sobre os dados."
  },
  {
    "objectID": "posts/data-terms-pt/index.html#arquitetura-e-governança-de-dados",
    "href": "posts/data-terms-pt/index.html#arquitetura-e-governança-de-dados",
    "title": "Termos com a palavra ‘Data’",
    "section": "Arquitetura e Governança de Dados",
    "text": "Arquitetura e Governança de Dados\nData Architecture (Arquitetura de Dados): Refere-se à estrutura geral de um sistema de dados de uma organização, incluindo suas políticas de gerenciamento de dados, regras e padrões.\nData Governance (Governança de Dados): A gestão da disponibilidade, usabilidade, integridade, segurança e privacidade dos dados em um sistema.\nData Mesh (Malha de Dados): Data Mesh é uma abordagem arquitetônica para a gestão de dados que trata os dados como um produto. Em vez de ter todos os dados centralizados em um único data lake ou data warehouse, o Data Mesh sugere descentralizar a propriedade dos dados e delegar a responsabilidade dos dados para as equipes que os produzem e usam. Isso pode melhorar a qualidade dos dados, a velocidade de entrega e a governança. A ideia por trás do Data Mesh é mover a arquitetura de dados além do paradigma centrado em monolitos para uma estrutura mais distribuída e orientada a produtos\nData Modeling (Modelagem de Dados): O processo de desenvolver modelos de dados para sistemas de banco de dados que representam as estruturas de dados de maneira muito clara."
  },
  {
    "objectID": "posts/data-terms-pt/index.html#estrutura-dos-dados",
    "href": "posts/data-terms-pt/index.html#estrutura-dos-dados",
    "title": "Termos com a palavra ‘Data’",
    "section": "Estrutura dos Dados",
    "text": "Estrutura dos Dados\nStructured and Unstructured Data (Dados Estruturados e Não Estruturados): Dados estruturados são altamente organizados e formatados de maneira a serem facilmente pesquisáveis, enquanto dados não estruturados são o oposto."
  },
  {
    "objectID": "posts/data-terms-pt/index.html#footnotes",
    "href": "posts/data-terms-pt/index.html#footnotes",
    "title": "Termos com a palavra ‘Data’",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nÉ importante lembrar que muitos desses termos podem desempenhar um papel em várias etapas diferentes do processo de ciência de dados.↩︎"
  },
  {
    "objectID": "posts/lambda-architecture-pt/index.html",
    "href": "posts/lambda-architecture-pt/index.html",
    "title": "Data Lake e Arquitetura Lambda",
    "section": "",
    "text": "#DataLake #LambdaArchitecture #BigData #AWSLambda #DataProcessing #DataAnalytics #CloudComputing #ETL #MachineLearning #DataScience"
  },
  {
    "objectID": "posts/lambda-architecture-pt/index.html#características-de-um-data-lake",
    "href": "posts/lambda-architecture-pt/index.html#características-de-um-data-lake",
    "title": "Data Lake e Arquitetura Lambda",
    "section": "Características de um Data Lake",
    "text": "Características de um Data Lake\nData Lakes são úteis quando você precisa manipular um grande volume de dados (Big Data).Geralmente, é recomendavél a implantação de Data Lakes para um volume de petabytes ou exabytes de dados. Abaixo as principais características:\n\nCentralizar todos os dados da organização num único local;\nAceita dados estruturados, semi-estruturados e não-estruturados;\nAlta performance em escrita (ingestão) e em acesso (consumption);\nBaixo custo de armazenamento;\nSuporta regras de segurança e proteção de dados;\nDesacopla o armazenamento do processamento (permitindo alta performance e alta escala)."
  },
  {
    "objectID": "posts/lambda-architecture-pt/index.html#arquitetura-lambda",
    "href": "posts/lambda-architecture-pt/index.html#arquitetura-lambda",
    "title": "Data Lake e Arquitetura Lambda",
    "section": "Arquitetura Lambda",
    "text": "Arquitetura Lambda\nA Arquitetura Lambda é frequentemente usada em Data Lakes devido à sua capacidade de processar grandes quantidades de dados em tempo real e em lote. Essa arquitetura permite que as empresas usem dados históricos (através da camada de batch) e dados em tempo real (através da camada de speed) para obter insights.\n\n\n\nConcepção da Arquitetura Lambda\n\n\nA capacidade de combinar a análise de dados históricos e em tempo real pode fornecer uma visão mais completa do negócio, permitindo a tomada de decisões mais assertivas. Além disso, como a arquitetura Lambda permite o processamento de dados brutos, ela se encaixa bem com o conceito de Data Lake, que armazena dados em seu formato bruto.\nA Arquitetura Lambda tem três componentes principais:\n\nBatch Layer (Camada de Batch): Esta camada tem como objetivo lidar com grandes volumes de dados históricos. Os dados são processados em lote e o resultado é armazenado no data lake. Esta camada é responsável pela computação de views (visões ou conjuntos de dados) baseadas em um longo período de tempo.\nSpeed Layer (Camada de Speed): Esta camada tem como objetivo fornecer visualizações em tempo real dos dados mais recentes, lidando com dados que não foram processados pela camada de batch. Sua finalidade é fornecer insights em tempo real e ela normalmente opera com uma janela de tempo muito menor.\nService Layer (Camada de Serviço): Esta camada tem a função de responder às consultas, geralmente feitas por usuários ou aplicativos. O procedimento consiste em consultar os dados processados tanto pela camada de batch quanto pela camada de speed.\n\nNo entanto, a arquitetura lambda é complexa para implementar e manter, já que exige a manutenção de dois sistemas de processamento de dados paralelos (batch e speed).."
  },
  {
    "objectID": "posts/lambda-architecture-pt/index.html#implementação-da-arquitetura-lambda",
    "href": "posts/lambda-architecture-pt/index.html#implementação-da-arquitetura-lambda",
    "title": "Data Lake e Arquitetura Lambda",
    "section": "Implementação da Arquitetura Lambda",
    "text": "Implementação da Arquitetura Lambda\nA implementação da Arquitetura Lambda geralmente envolve várias ferramentas diferentes, dependendo das necessidades específicas do projeto.A seguir são apresentadas algumas das ferramentas comumente usadas:\n\nApache Hadoop: O Hadoop é um dos sistemas mais populares para processamento de dados em lote. Ele fornece um sistema de arquivos distribuído que permite o processamento de grandes volumes de dados em clusters de computadores.\nApache Spark: O Spark é outra ferramenta comumente usada para processamento de dados em lote, também podendo ser usado para o processamento de dados em tempo real, tornando-o uma opção flexível para a camada de speed.\nApache Storm: O Storm é uma solução para processamento de dados em tempo real. É capaz de processar fluxos de dados grandes e contínuos, sendo uma boa escolha para a camada de speed na Arquitetura Lambda.\nApache Kafka:O Kafka é um sistema de streaming de dados distribuídos. Ele é comumente usado para gerenciar fluxos de dados entre as diferentes camadas de uma arquitetura Lambda.\nAmazon S3: O Amazon S3 é um serviço de armazenamento em nuvem que é bastante usado para armazenar os dados brutos e processados na Arquitetura Lambda.\nElasticsearch / Apache Solr: Essas são ferramentas de pesquisa e análise que podem ser usadas na camada de serviço para fornecer consultas rápidas e eficientes sobre os dados processados.\n\nVale ressaltar que a escolha de ferramentas dependerá das necessidades específicas de cada projeto. Portanto, é possível que diferentes implementações da Arquitetura Lambda usem um conjunto diferente de ferramentas."
  },
  {
    "objectID": "posts/lambda-architecture-pt/index.html#conclusão",
    "href": "posts/lambda-architecture-pt/index.html#conclusão",
    "title": "Data Lake e Arquitetura Lambda",
    "section": "Conclusão",
    "text": "Conclusão\nA crescente quantidade de dados gerados por várias fontes vem exigindo que as empresas explorem soluções como Data Lakes e Arquitetura Lambda para lidar com essa avalanche de informações. As empresas estão procurando extrair valor desses dados, e a combinação de Data Lakes com a Arquitetura Lambda permite que elas façam exatamente isso.\nEm resumo, embora o uso de Data Lakes e a Arquitetura Lambda possam apresentar desafios, eles oferecem benefícios significativos para as instituições/corporações que precisam lidar com grandes volumes de dados variados e desejam obter insights em tempo real. Como todas as decisões tecnológicas, a escolha de usar estas soluções deve ser feita com base nas necessidades específicas e capacidades de uma organização."
  },
  {
    "objectID": "ts-and-cs.html",
    "href": "ts-and-cs.html",
    "title": "Terms and conditions",
    "section": "",
    "text": "Statements of fact and opinion published on this website are those of the respective authors and contributors.\nThe NionMaron website’s content is created with responsibility and care. However, the blog disclaims all warranties, express and implied, regarding the accuracy of the information in its materials and on linked sites. The NionMaron website and its linked content are provided as-is. We do not guarantee the accuracy or reliability of the information. This disclaimer covers:\n\nany implied warranties of merchantability and fitness for a particular purpose.\nany liability for damage to your computer hardware, data, information, materials and business resulting from the information or the lack of information available.\nany errors, omissions, or inaccuracies in the information.\nany decision made or action taken or not taken in reliance upon the information.\n\nBy using this site, you agree to these terms and conditions of use."
  },
  {
    "objectID": "ts-and-cs.html#legal-disclaimer",
    "href": "ts-and-cs.html#legal-disclaimer",
    "title": "Terms and conditions",
    "section": "",
    "text": "Statements of fact and opinion published on this website are those of the respective authors and contributors.\nThe NionMaron website’s content is created with responsibility and care. However, the blog disclaims all warranties, express and implied, regarding the accuracy of the information in its materials and on linked sites. The NionMaron website and its linked content are provided as-is. We do not guarantee the accuracy or reliability of the information. This disclaimer covers:\n\nany implied warranties of merchantability and fitness for a particular purpose.\nany liability for damage to your computer hardware, data, information, materials and business resulting from the information or the lack of information available.\nany errors, omissions, or inaccuracies in the information.\nany decision made or action taken or not taken in reliance upon the information.\n\nBy using this site, you agree to these terms and conditions of use."
  },
  {
    "objectID": "ts-and-cs.html#site-content",
    "href": "ts-and-cs.html#site-content",
    "title": "Terms and conditions",
    "section": "Site content",
    "text": "Site content\n\nWhere licence terms for individual articles, videos, images and other published content permit republication, you may do so in accordance with the stated terms of the respective licence(s).\nYou are not permitted to republish this site in its entirety."
  },
  {
    "objectID": "ts-and-cs.html#software-and-services",
    "href": "ts-and-cs.html#software-and-services",
    "title": "Terms and conditions",
    "section": "Software and services",
    "text": "Software and services\n\nSource code and files for this site are available from GitHub.\nThis site is built using Quarto, an open-source scientific and technical publishing system developed by Posit. Quarto source code and software licences are available from GitHub.\nNionMaron is hosted by Netlify."
  }
]